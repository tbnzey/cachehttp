apply plugin: 'com.android.application'
apply plugin: 'realm-android'

def lib = rootProject.ext.libraries
def packageTime() {
    return new Date().format("yyyyMMdd", TimeZone.getTimeZone("UTC"))
}
dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile "com.android.support:support-v4:${lib.support}"
    compile "com.android.support:appcompat-v7:${lib.appcompat}"
    compile "com.squareup.retrofit2:retrofit:${lib.retrofit}"
    // RxAndroid 推荐同时加载RxJava
    compile "io.reactivex:rxjava:${lib.rxjava}"
    compile "io.reactivex:rxandroid:${lib.rxandroid}"
//    compile 'com.google.code.gson:gson:2.6.2'//Gson 库
//    compile 'com.squareup.retrofit2:converter-gson:2.1.0'//转换器，请求结果转换成Model
    compile "com.squareup.retrofit2:adapter-rxjava:${lib.adapter_rxjava}"//配合Rxjava 使用
    testCompile 'junit:junit:4.12'
}
android {
    compileSdkVersion cfg_compileVersion
    buildToolsVersion cfg_buildToolsVersion
    defaultConfig {
        applicationId cfg_packageName
        minSdkVersion cfg_minSdk
        targetSdkVersion cfg_targetSdk
        versionCode cfg_version_code
        versionName cfg_version_name
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
}

if(true){
    android.productFlavors {
        _91 {}
        _360 {}
    }
    android.productFlavors.all { flavor ->
        flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
    }
    android.signingConfigs{
        release{
            File propFile = file('signing.properties');
            if (propFile.exists()) {
                def Properties props = new Properties()
                props.load(new FileInputStream(propFile))
                if (props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
                        props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
                    android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
                    android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
                    android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
                    android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
                } else {
                    android.buildTypes.release.signingConfig = null
                }
            } else {
                android.buildTypes.release.signingConfig = null
            }
        }
    }

    android.buildTypes {
        release {
            // 不显示Log
            buildConfigField "boolean", "LOG_DEBUG", "false"
            //混淆
            minifyEnabled false
            //Zipalign优化
            zipAlignEnabled true
            // 移除无用的resource文件(启用会出现指令打包出错)
//            shrinkResources true
            minifyEnabled false
            proguardFiles android.getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    /**
     * apk打包名称统一处理
     */
    android.applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                File outputDirectory = new File(outputFile.parent);
                def fileName
                if (variant.buildType.name == "release") {
                    fileName = "xcp_v${android.defaultConfig.versionName}_build${packageTime()}_${variant.productFlavors[0].name}.apk"
                } else {
                    fileName = "xcp_beta.apk"
                }
                output.outputFile = new File(outputDirectory, fileName)
            }
        }
    }
}